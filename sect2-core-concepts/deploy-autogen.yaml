apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: httpd-frontend
  name: httpd-frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: httpd-frontend
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: httpd-frontend
    spec:
      containers:
      - image: httpd:2.4-alpine
        name: httpd
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        ports:
        - containerPort: 80
          protocol: TCP


# -----------------------------------------------------------------------------
# kubectl create service clusterip redis-service --tcp=6379:6379 --dry-run=client -o yaml
#
# Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379
#   * this will automatically use the pod's labels as selectors.
# kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
#
# OR
#
# USED "kubectl create $RESOURCE" to auto-generate this manifest
#         kubectl create deployment --help
# kubectl create deployment httpd-frontend --image=httpd:2.4-alpine --replicas=3 --dry-run=client -o yaml > deploy-autogen.yaml
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:
#   kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort --dry-run=client -o yaml
#
# This will automatically use the pod's labels as selectors, but you cannot
# specify the node port. You have to generate a definition file and then add
# the node port in manually before creating the service with the pod.
#
# OR
#
# kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml
# This will not use the pods' labels as selectors.
#
# Both the above commands have their own challenges. While one of it cannot
# accept a selector the other cannot accept a node port. I would recommend
# going with the `kubectl expose` command. If you need to specify a node port,
# generate a definition file using the same command and manually input the
# nodeport before creating the service.
# -----------------------------------------------------------------------------
